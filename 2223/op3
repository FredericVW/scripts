#!/usr/bin/bash 
clear
VERSIE="1.04"
echo "---------------------------------------------------------"
echo "Controle opgave 3 DNS Systeembeheer 2 versie $VERSIE"
if [ -f ~/.bashs2 ]; then
	echo "Je hebt deze opgave al geupload."
	#exit
fi
if [ "$USER" != "root" ]; then
	echo "Voer dit script uit met sudo."
	exit
fi
echo "---------------------------------------------------------"
#--------------------------------------------------------------
RED=`tput setaf 1`
GREEN=`tput setaf 2`
BLUE=`tput setaf 4`
CYAN=`tput setaf 6`
RC=`tput sgr0`
echo "$CYAN"
echo "Zorg dat alle services opnieuw draaien voor je het script opnieuw uitvoert."
echo "Het script stopt de services op beide systemen.$RC"
echo "Voer dit script uit vanop de eerste DNS server."
echo "Zorg dat je als root ssh kan doen zonder paswoord van de eerste DNS server naar de tweede."
echo "Zet twee DNS servers op met 192.168.x.20 resp .21 als fix IP."
echo "De .20 is de primary DNS en de .21 is de secondary."
echo "Vul dit in de configfile op één lijn in met vierkante haakjes."
echo "Zorg dat je respectievelijke DNS server zichtzelf als primary heeft staan."
echo "Noem de eerste server ns1. en de tweede ns2.."
echo "Kies als domein je (eventueel verkorte) naam, bijvoorbeeld fredlinux.be".
echo "Tijdens het testen mag je maar één adapter hebben."
echo "Opgelet: op HoGent zelf zullen sommige tests niet goed werken. Je kan bijvoorbeeld"
echo " niet naar buiten pingen of DNS lookups doen."
echo "Verdere opdrachten lees je in de testen."
echo "-------------------------------------------------------------------------------------------"
#--------------------------------------------------------------
#Detect username
USERNAME=`who | grep -vw root | head -1 | cut -d " " -f1`
OPL_FILE="/tmp/.O3-$USERNAME-`date +%H%M`.txt"
DET_FILE="/tmp/.details3-$USERNAME.txt"
if [ -f $DET_FILE ]; then
	rm $DET_FILE
fi
exec 3>&1 1>$OPL_FILE
VG=1
PT=0
echo "---------------------------------------------------------"
read -p "Familienaam: " FAM
read -p "Voornaam: " VNM
#--------------------------------------------------------------
#--------------------------------------------------------------
echo "Hostname: `hostname`"  
echo "Script loopt met user: `whoami`" 

#Check IP DNS1
AANT_AD="`ls /sys/class/net | grep -v lo | wc -l`"
ADPT="`ls /sys/class/net | grep -v lo`"
IP_A="`ip a show dev $ADPT | grep \"inet \"| awk ' { print $2}'`"
IP_A_SUB="`ip a show dev $ADPT | grep \"inet \"| awk ' { print $2}' | awk -F '.' '{print $3}'`"
DHCP="`ip a show dev $ADPT | grep \"inet \"| awk ' { print $7}'`"
AANT_AD_DNS2="`ssh 192.168.$IP_A_SUB.21 ls /sys/class/net | grep -v lo | wc -l`"
ADPT_DNS2="`ssh 192.168.$IP_A_SUB.21 ls /sys/class/net | grep -v lo`"
if [ "$AANT_AD" != "1" ] || [ "$AANT_AD_DNS2" != "1" ]; then
	echo "$RED Adapters gevonden DNS1: $AANT_AD, er mag er maar één zijn.$RC"
	echo "$RED Adapters gevonden DNS2: $AANT_AD_DNS2, er mag er maar één zijn.$RC"
	exit
else
	echo "Adapter DNS1: $ADPT, IP: $IP_A, SUB: $IP_A_SUB" >> $DET_FILE
	echo "Adapter DNS2: $ADPT_DNS2" >> $DET_FILE
fi

systemd-resolve --flush-caches >>$DET_FILE
ssh root@192.168.$IP_A_SUB.21 systemd-resolve --flush-caches >>$DET_FILE

#check domain
DOM="`ls /etc/bind |grep db. | grep -v .0 | grep -v .127 | grep -v .empty | grep -v .local | grep -v .255 | grep -v .168 | cut -c 4-50 ` "
DOM2="`echo $DOM | tr -d ' '`"
DOM=$DOM2
read -p "Is je domein $GREEN$DOM$RC? Druk Enter of geef je domein in. Wacht daarna ong. 30 sec: " GIVE_DOM
if [ "$GIVE_DOM" != "" ]; then
       DOM=$GIVE_DOM
fi

#Ping externe server
ping -c 1 www.google.be >>$DET_FILE 
PGRES=$?
if [ $PGRES == 0 ]; then
	echo "$GREEN Pingen naar www.google.be op DNS1 lukt.$RC"
	((PT++))
else
	echo "$RED Pingen naar www.google.be op DNS1 lukt niet.$RC"	
fi

#ping DNS1 externe server
#Eerst maken we een file aan, we sturen die door en voeren die daar uit.
SCR=sshping.sh
echo "ping -c 1 www.google.be" > $SCR 
echo "RES=\$?" >>$SCR
echo "echo \"Result=\$RES\"" >> $SCR
scp $SCR 192.168.$IP_A_SUB.21:/tmp
ssh 192.168.$IP_A_SUB.21 chmod +x /tmp/$SCR
PGRES="`ssh 192.168.$IP_A_SUB.21 /tmp/$SCR | grep Result | awk -F '=' '{print $2}'`"
ssh 192.168.$IP_A_SUB.21 rm -f /tmp/$SCR
if [ $PGRES == 0 ]; then
        echo "$GREEN Pingen naar www.google.be op DNS2 lukt.$RC"
        ((PT++))
else
        echo "$RED Pingen naar www.google.be op DNS2 lukt niet.$RC"
fi

function check_netplan {
	#Check order client DNS settings
	#NPLAN = filename of network netplan config yaml file
	#CUR_SRV = current server 1 or 2
	#I1=first IP DNS; I2=second
	#ADAP = adaptor to look for
	echo "************ Netplan DNS$CUR_SRV ***************" >>$DET_FILE
	cat $NPLAN >>$DET_FILE
	FOUND_ADP=0
	FOUND_NS=0
	while read NP_LINE
	do
	  if [ "$NP_LINE" == "$ADAP:" ]; then FOUND_ADP=1; fi
	  if [ "$FOUND_ADP" == "1" ] && [ "$NP_LINE" == "nameservers:" ]; then FOUND_NS=1 ; fi
	  if [ "$FOUND_ADP" == "1" ] && [ "$FOUND_NS" == "1" ]; then 
		ITEM="`echo $NP_LINE | awk -F ':' '{ print $1 }'`" 
		if [ "$ITEM" == "addresses" ]; then
			VALUE_LONG="`echo $NP_LINE | awk -F ':' '{ print $2 }'`" 
			VALUE="`echo $VALUE_LONG | sed 's/ //g'| sed 's/\[//g' | sed 's/\]//g'`" 
			VAL1="`echo $VALUE | awk -F ',' '{ print $1 }'`"
			VAL2="`echo $VALUE | awk -F ',' '{ print $2 }'`"
			echo "ZOEK DNS VOLGORDE: Value = $VALUE; Val1=$VAL1; Val2=$VAL2; I1=$I1; I2=$I2" >> $DET_FILE
			if [ "$VAL1" == "192.168.$IP_A_SUB.$I1" ] && [ "$VAL2" == "192.168.$IP_A_SUB.$I2" ]; then
				echo "$GREEN Volgorde DNS instellingen zijn goed op DNS$CUR_SRV ($VAL1,$VAL2).$RC"
				((PT++))
			else
				echo "$RED Volgorde DNS instellingen zijn fout op DNS$CUR_SRV ($VAL1,$VAL2).$RC"
			fi
		fi
	  fi
	done <$NPLAN
}

#DNS order search 1
CUR_SRV=1; I1=20; I2=21; ADAP=$ADPT
NPLAN="/etc/netplan/`ls /etc/netplan  | grep 00 | head -1`"
check_netplan

#DNS order search 2
CUR_SRV=2; I1=21; I2=20; ADAP=$ADPT_DNS2
NPLAN_2="`ssh 192.168.$IP_A_SUB.21 ls /etc/netplan  | grep 00 | head -1`"
scp 192.168.$IP_A_SUB.21:/etc/netplan/$NPLAN_2 /tmp
NPLAN=/tmp/$NPLAN_2
echo "NPLAN_2=$NPLAN2; NPLAN=$NPLAN"  >> $DET_FILE
check_netplan
rm $NPLAN >>$DET_FILE 2>&1


#check ip address
GOOD_IP1="192.168.$IP_A_SUB.20/24"
if [ "$GOOD_IP1" == "$IP_A" ]; then
	if [ $DHCP != "dynamic" ]; then
		echo "$GREEN IP adres van DNS1 is goed. ($DHCP) $RC"
		((PT++))
	else
		echo "$RED Geen fix IP op DNS2. ($DHCP)$RC"
	fi
else
	echo "$RED IP adres van DNS1 is niet in orde. ($IP_A) $RC"
fi
#-----------------------------------------------------
#Check IP DNS2
AANT_AD="`ssh root@192.168.$IP_A_SUB.21 ls /sys/class/net | grep -v lo | wc -l`"
ADPT="`ssh root@192.168.$IP_A_SUB.21 ls /sys/class/net | grep -v lo`"
IP_A="`ssh root@192.168.$IP_A_SUB.21 ip a show dev $ADPT | grep \"inet \"| awk ' { print $2}'`"
IP_A_SUB="`ssh root@192.168.$IP_A_SUB.21 ip a show dev $ADPT | grep \"inet \"| awk ' { print $2}' | awk -F '.' '{print $3}'`"
DHCP="`ssh root@192.168.$IP_A_SUB.21 ip a show dev $ADPT | grep \"inet \"| awk ' { print $7}'`"
if [ $AANT_AD != "1" ]; then
	echo "$RED Adapters gevonden: $AANT_AD, er mag er maar één zijn.$RC"
	exit
else
	echo "Adapter : $ADPT, IP: $IP_A, SUB: $IP_A_SUB" >> $DET_FILE
fi


#Check IP address
GOOD_IP2="192.168.$IP_A_SUB.21/24"
if [ "$GOOD_IP2" == "$IP_A" ]; then
	if [ $DHCP != "dynamic" ]; then
		echo "$GREEN IP adres van DNS2 is goed. ($DHCP) $RC"
		((PT++))
	else
		echo "$RED Geen fix IP op DNS2. ($DHCP)$RC"
	fi
else
	echo "$RED IP adres van DNS2 is niet in orde. ($IP_A) $RC"
fi

#Check services
STATUS="`systemctl status named | grep Active | awk '{print $2}'`"
if [ $STATUS == "active" ]; then 
	echo "$GREEN Service DNS1 draait $RC"
	((PT++))
else
	echo "$RED Service DNS1 draait niet $RC"
fi

STATUS="`ssh root@192.168.$IP_A_SUB.21 systemctl status named | grep Active | awk '{print $2}'`"
if [ $STATUS == "active" ]; then 
	echo "$GREEN Service DNS2 draait $RC"
	((PT++))
else
	echo "$RED Service DNS2 draait niet $RC"
fi

#resolving FORWARD DNS1
NS1="`dig @192.168.$IP_A_SUB.20 +time=2 +noall +answer ns1.$DOM | awk '{print $5}'`"
NS2="`dig @192.168.$IP_A_SUB.20 +time=2 +noall +answer ns2.$DOM | awk '{print $5}'`"
if [ $NS1 == "192.168.$IP_A_SUB.20" ]; then
        echo "$GREEN DNS1 OK: Forward lookup ns1.$DOM geeft $NS1.$RC"
	((PT++))
else
        echo "$RED DNS1 NOK: Forward lookup ns1.$DOM geeft $NS1.$RC"
fi	
if [ $NS2 == "192.168.$IP_A_SUB.21" ]; then
        echo "$GREEN DNS1 OK: Forward lookup ns2.$DOM geeft $NS2.$RC"
	((PT++))
else
        echo "$RED DNS1 NOK: Forward lookup ns2.$DOM geeft $NS2.$RC"
fi	

#resolving REVERSE DNS1
NS1="`dig @192.168.$IP_A_SUB.20 -x 192.168.$IP_A_SUB.20 | grep $DOM | awk '{print $5}'`"
NS2="`dig @192.168.$IP_A_SUB.20 -x 192.168.$IP_A_SUB.21 | grep $DOM | awk '{print $5}'`"
echo "NS1=$NS1" >>$DET_FILE
echo "NS2=$NS2" >>$DET_FILE
if [ "$NS1" == "ns1.$DOM." ]; then
        echo "$GREEN DNS1 OK: Reverse lookup 192.168.$IP_A_SUB.20 geeft $NS1.$RC"
	((PT++))
else
        echo "$RED DNS1 NOK: Reverse lookup 192.168.$IP_A_SUB.20 geeft $NS1.$RC"
fi	
if [ "$NS2" == "ns2.$DOM." ]; then
        echo "$GREEN DNS1 OK: Reverse lookup 192.168.$IP_A_SUB.20 geeft $NS2.$RC"
	((PT++))
else
        echo "$RED DNS1 NOK: Reverse lookup 192.168.$IP_A_SUB.20  geeft $NS2.$RC"
fi	

#resolving FORWARD DNS2
NS1="`dig @192.168.$IP_A_SUB.21 +time=2 +noall +answer ns1.$DOM | awk '{print $5}'`"
NS2="`dig @192.168.$IP_A_SUB.21 +time=2 +noall +answer ns2.$DOM | awk '{print $5}'`"
if [ "$NS1" == "192.168.$IP_A_SUB.20" ]; then
        echo "$GREEN DNS2 OK: Forward lookup ns1.$DOM geeft $NS1.$RC"
	((PT++))
else
        echo "$RED DNS2 NOK: Forward lookup ns1.$DOM geeft $NS1.$RC"
fi	
if [ "$NS2" == "192.168.$IP_A_SUB.21" ]; then
        echo "$GREEN DNS2 OK: Forward lookup ns2.$DOM geeft $NS2.$RC"
	((PT++))
else
        echo "$RED DNS2 NOK: Forward lookup ns2.$DOM geeft $NS2.$RC"
fi	

#resolving REVERSE DNS2
NS1="`dig @192.168.$IP_A_SUB.21 -x 192.168.$IP_A_SUB.20 | grep $DOM | awk '{print $5}'`"
NS2="`dig @192.168.$IP_A_SUB.21 -x 192.168.$IP_A_SUB.21 | grep $DOM | awk '{print $5}'`"
echo "NS1=$NS1" >>$DET_FILE
echo "NS2=$NS2" >>$DET_FILE
if [ "$NS1" == "ns1.$DOM." ]; then
        echo "$GREEN DNS2 OK: Reverse lookup 192.168.$IP_A_SUB.20 geeft $NS1.$RC"
	((PT++))
else
        echo "$RED DNS2 NOK: Reverse lookup 192.168.$IP_A_SUB.20 geeft $NS1.$RC"
fi	
if [ "$NS2" == "ns2.$DOM." ]; then
        echo "$GREEN DNS2 OK: Reverse lookup 192.168.$IP_A_SUB.21 geeft $NS2.$RC"
	((PT++))
else
        echo "$RED DNS2 NOK: Reverse lookup 192.168.$IP_A_SUB.21 geeft $NS2.$RC"
fi	


#stop eerste server
systemctl stop named
NS1="`dig +time=2 +noall +answer ns1.$DOM | awk '{print $5}'`"
if [ $NS1 == "192.168.$IP_A_SUB.20" ]; then
        echo "$GREEN DNS1 OK, met sevice down: ns1.$DOM geeft $NS1.$RC"
	((PT++))
else
        echo "$RED DNS1 NOK, met service down: ns1.$DOM geeft $NS1.$RC"
fi	
systemctl start named

#stop tweede server
ssh root@192.168.$IP_A_SUB.21 systemctl stop named
NS1="`ssh root@192.168.$IP_A_SUB.21 dig +time=2 +noall +answer ns1.$DOM | awk '{print $5}'`"
if [ $NS1 == "192.168.$IP_A_SUB.20" ]; then
        echo "$GREEN DNS2 OK, met sevice down: ns1.$DOM geeft $NS1.$RC"
	((PT++))
else
        echo "$RED DNS2 NOK, met service down: ns1.$DOM geeft $NS1.$RC"
fi	
ssh root@192.168.$IP_A_SUB.21 systemctl start named


## Writing configfiles to feedback file
echo "********** First DNS settings *************" >>$DET_FILE
ls -a /etc/bind >>$DET_FILE
for FN in /etc/bind/*
do
	echo "DNS1 ++++++++++++++++++ Begin $FN ++++++++++++++++++" >>$DET_FILE
	if [[ $FN == *db.* ]] || [[ $FN == *named.conf* ]]; then cat $FN >>$DET_FILE ; fi 
	printf "DNS1 ------------------ Einde $FN ------------------\n\n\n" >>$DET_FILE
done

echo "********** secondary DNS settings *************" >>$DET_FILE
ssh 192.168.$IP_A_SUB.21 ls -a /etc/bind >>$DET_FILE
LIST_FILES="`ssh 192.168.$IP_A_SUB.21 ls -a /etc/bind`" >>$DET_FILE
for FN in $LIST_FILES
do
	echo "DNS2 ++++++++++++++++++ Begin $FN ++++++++++++++++++" >>$DET_FILE 
	if [[ $FN == *db.* ]] || [[ $FN == *named.conf* ]]; then ssh 192.168.$IP_A_SUB.21 cat /etc/bind/$FN >>$DET_FILE; fi
	printf "DNS2 ------------------ Einde $FN ------------------\n\n\n" >>$DET_FILE
done

#Slotverwerking
#---------------------------------------------------------
echo ------
#Bereken de score van op 18 naar op 10
OPTIEN="`echo \"scale=2; $PT/1.8 \"| bc -l`"
echo "Totaal: $PT / 18, ofwel $OPTIEN / 10"
echo "NAAM: $FAM, $VNM"
exec 1>&3 3>&-
cat $OPL_FILE
read -p "Geef de nummers van de vragen in die volgens jou niet correct zijn, gescheiden door een komma (Enter=alles OK): " FOUTEVRAGEN
echo "Deze vragen zijn niet goed beoordeeld: $FOUTEVRAGEN" >> $OPL_FILE
cat $DET_FILE >> $OPL_FILE # stuurt de details mee met de ftp straks
echo "Om in te dienen (doorsturen) typ je \"Ja\" met hoofdletter."
read -p "Wil je indienen? " DOORSTUREN
if [ $DOORSTUREN == "Ja" ] ; then
	#Doorsturen file
	ftp -in <<EOF
	open files.000webhost.com
	user sysb2 sjC4yrsf2DYxePE
	bin
	passive
	put $OPL_FILE
	close
	bye
EOF
	if [ $? == 0 ] ; then
		echo "De opdracht werd ingediend."
		touch ~/.bashs2
	else
		echo "Er was een probleem met het indienen."
	fi
else
	echo "De opdracht werd nog niet indgediend."
fi
rm $OPL_FILE
rm $DET_FILE
